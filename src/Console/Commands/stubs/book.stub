<?php

use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateBookTable extends Migration
{
    /**
     * @var string
     */
    protected $categoriesTable;

    /**
     * @var string
     */
    protected $pressesTable;

    /**
     * @var string
     */
    protected $authorsTable;

    /**
     * @var string
     */
    protected $booksTable;

    /**
     * @var string
     */
    protected $contentsTable;

    /**
     * @var string
     */
    protected $topicsTable;

    /**
     * @var string
     */
    protected $attrsTable;

    /**
     * @var string
     */
    protected $attrValuesTable;

    /**
     * CreateCatalogTable constructor.
     */
    public function __construct()
    {
        $this->categoriesTable = Config::get('book.categories_table');
        $this->pressesTable = Config::get('book.presses_table');
        $this->authorsTable = Config::get('book.authors_table');
        $this->booksTable = Config::get('book.books_table');
        $this->contentsTable = Config::get('book.contents_table');
        $this->topicsTable = Config::get('book.topics_table');
        $this->attrsTable = Config::get('book.attrs_table');
        $this->attrValuesTable = Config::get('book.attr_values_table');
    }

    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        // Create table for storing categories
        Schema::create($this->categoriesTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('parent_id')->default(0);
            $table->string('name', 32);
            $table->string('path')->default('');
            $table->text('description')->nullable();
            $table->integer('position')->default(0);
            $table->integer('status')->default(0);
            $table->string('slug')->nullable();
            $table->string('meta_title')->nullable();
            $table->string('meta_keywords')->nullable();
            $table->string('meta_description')->nullable();
            $table->timestamps();
        });

        // Create table for storing authors
        Schema::create($this->authorsTable, function (Blueprint $table) {
            $table->increments('id');
            $table->string('nickname');
            $table->string('avatar')->nullable();

            $table->timestamps();
        });

        // Create table for storing books
        Schema::create($this->booksTable, function (Blueprint $table) {
            $table->increments('id');
            $table->string('name');
            $table->string('description');
            $table->unsignedInteger('image_id');
            $table->unsignedInteger('author_id');
            $table->boolean('end')->default(false);
            $table->unsignedInteger('category_id');
            $table->Integer('status')->default(0);
            $table->string('slug')->nullable();
            $table->string('meta_title')->nullable();
            $table->string('meta_keywords')->nullable();
            $table->string('meta_description')->nullable();
            $table->timestamps();
        });

        // Create table for storing book chapters.
        Schema::create($this->topicsTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('book_id');
            $table->unsignedTinyInteger('type')->default(0);
            $table->unsignedInteger('parent_id')->default(0);
            $table->string('path', 64)->default('');
            $table->string('title', 64);
            $table->string('description');
            $table->Integer('status')->default(0);
            $table->unsignedInteger('word_count')->default(0);
            $table->unsignedInteger('position')->default(0);
            $table->timestamp('published_at')->nullable();
            $table->timestamps();
        });

        // Create table for storing contents
        Schema::create($this->contentsTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('topic_id');
            $table->longText('data');
            $table->timestamps();
        });

        // Create table for storing attribute groups
        Schema::create($this->attrsTable, function (Blueprint $table) {
            $table->increments('id');
            $table->string('name', 32);
            $table->boolean('is_filterable')->default(false);
            $table->boolean('is_searchable')->default(false);
            $table->boolean('is_viewable')->default(false);
            $table->integer('position')->default(0);
            $table->timestamps();
        });

        // Create table for storing attribute values
        Schema::create($this->attrValuesTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('attr_id');
            $table->string('name', 32);
            $table->integer('position')->default(0);
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists($this->attrValuesTable);
        Schema::dropIfExists($this->attrsTable);
        Schema::dropIfExists($this->contentsTable);
        Schema::dropIfExists($this->topicsTable);
        Schema::dropIfExists($this->booksTable);
        Schema::dropIfExists($this->pressesTable);
        Schema::dropIfExists($this->authorsTable);
        Schema::dropIfExists($this->categoriesTable);
    }
}