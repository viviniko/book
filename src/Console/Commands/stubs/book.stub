<?php

use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateBookTable extends Migration
{
    /**
     * @var string
     */
    protected $categoriesTable;

    /**
     * @var string
     */
    protected $pressesTable;

    /**
     * @var string
     */
    protected $booksTable;

    /**
     * @var string
     */
    protected $contentsTable;

    /**
     * @var string
     */
    protected $chaptersTable;

    /**
     * @var string
     */
    protected $attributeGroupsTable;

    /**
     * @var string
     */
    protected $attributesTable;

    /**
     * @var string
     */
    protected $bookAttributeTable;

    /**
     * CreateCatalogTable constructor.
     */
    public function __construct()
    {
        $this->categoriesTable = Config::get('book.categories_table');
        $this->pressesTable = Config::get('book.presses_table');
        $this->booksTable = Config::get('book.books_table');
        $this->contentsTable = Config::get('book.contents_table');
        $this->chaptersTable = Config::get('book.chapters_table');
        $this->attributeGroupsTable = Config::get('book.attribute_groups_table');
        $this->attributesTable = Config::get('book.attributes_table');
        $this->bookAttributeTable = Config::get('book.book_attribute_table');
    }

    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        // Create table for storing categories
        Schema::create($this->categoriesTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('parent_id')->default(0);
            $table->string('name', 32);
            $table->string('path')->default('');
            $table->text('description')->nullable();
            $table->integer('sort')->default(0);
            $table->boolean('is_active')->default(true);

            $table->string('url_rewrite')->nullable();
            $table->string('meta_title')->nullable();
            $table->string('meta_keywords')->nullable();
            $table->string('meta_description')->nullable();
            $table->timestamps();
        });

        // Create table for storing books
        Schema::create($this->booksTable, function (Blueprint $table) {
            $table->increments('id');
            $table->string('name');
            $table->string('author', 32);
            $table->string('cover');
            $table->string('description');
            $table->unsignedInteger('latest_chapter_id')->default(0);
            $table->unsignedInteger('chapter_max_number')->default(0);
            $table->boolean('is_end')->default(false);
            $table->unsignedInteger('word_count')->default(0);
            $table->unsignedInteger('category_id');
            $table->boolean('is_active')->default(true);

            $table->string('url_rewrite')->nullable();
            $table->timestamps();

            $table->foreign('category_id')->references('id')->on($this->categoriesTable)
                ->onUpdate('cascade')->onDelete('cascade');
        });

        // Create table for storing book chapters.
        Schema::create($this->chaptersTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('book_id');
            $table->unsignedTinyInteger('type')->default(0);
            $table->unsignedInteger('parent_id')->default(0);
            $table->string('path', 64)->default('');
            $table->string('title', 64);
            $table->string('description');
            $table->string('status', 32);
            $table->unsignedInteger('word_count')->default(0);
            $table->unsignedInteger('number')->default(0);
            $table->unsignedInteger('sort')->default(0);
            $table->timestamps();

            $table->foreign('book_id')->references('id')->on($this->booksTable)
                ->onUpdate('cascade')->onDelete('cascade');
        });

        // Create table for storing contents
        Schema::create($this->contentsTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('chapter_id');
            $table->longText('content');
            $table->timestamps();

            $table->foreign('chapter_id')->references('id')->on($this->chaptersTable)
                ->onUpdate('cascade')->onDelete('cascade');
        });

        // Create table for storing attribute groups
        Schema::create($this->attributeGroupsTable, function (Blueprint $table) {
            $table->increments('id');
            $table->string('name', 32);
            $table->boolean('is_filterable')->default(false);
            $table->boolean('is_searchable')->default(false);
            $table->boolean('is_viewable')->default(false);
            $table->integer('sort')->default(0);
            $table->timestamps();
        });

        // Create table for storing attribute values
        Schema::create($this->attributesTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('group_id');
            $table->string('name', 32);
            $table->integer('sort')->default(0);
            $table->timestamps();

            $table->foreign('group_id')->references('id')->on($this->attributeGroupsTable)
                ->onUpdate('cascade')->onDelete('cascade');
        });

        // Create table for storing book attribute
        Schema::create($this->bookAttributeTable, function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedInteger('book_id');
            $table->unsignedInteger('attribute_id');

            $table->foreign('book_id')->references('id')->on($this->booksTable)
                ->onUpdate('cascade')->onDelete('cascade');
            $table->foreign('attribute_id')->references('id')->on($this->attributesTable)
                ->onUpdate('cascade')->onDelete('cascade');
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists($this->bookAttributeTable);
        Schema::dropIfExists($this->attributesTable);
        Schema::dropIfExists($this->attributeGroupsTable);
        Schema::dropIfExists($this->contentsTable);
        Schema::dropIfExists($this->chaptersTable);
        Schema::dropIfExists($this->booksTable);
        Schema::dropIfExists($this->pressesTable);
        Schema::dropIfExists($this->categoriesTable);
    }
}